<?xml version="1.0" encoding="utf-8"?>
<!--
/*
 * ============================================================================
 * GNU Lesser General Public License
 * ============================================================================
 *
 * JasperReports - Free Java report-generating library.
 * Copyright (C) 2001-2006 JasperSoft Corporation http://www.jaspersoft.com
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307, USA.
 * 
 * JasperSoft Corporation
 * 303 Second Street, Suite 450 North
 * San Francisco, CA 94107
 * http://www.jaspersoft.com
 */

/*
 * Contributors:
 * Victor Kolesnikov - gladman4@gmail.com
 */
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	paddingLeft="0" paddingTop="0" paddingBottom="0" paddingRight="0" 
	verticalScrollPolicy="auto" horizontalScrollPolicy="auto"
	creationComplete="init()"
	resize="refreshPage()" horizontalAlign="center" height="100%" width="100%" verticalGap="0">
	<mx:ControlBar id="toolbar" width="100%">
		<!--
		<mx:Button width="22" toolTip="Print Report" id="btnPrintReport0" buttonMode="true"
			enabled="false">
			<mx:icon>@Embed(source='images/print.GIF')</mx:icon>
		</mx:Button>
		<mx:Button width="22" toolTip="Print Report" id="btnReload" buttonMode="true"
			enabled="true" click="btnReloadClick()">
			<mx:icon>@Embed(source='images/reload.GIF')</mx:icon>
		</mx:Button>
		-->
		<mx:HBox horizontalGap="1" verticalAlign="middle">
			<mx:Button width="22" toolTip="First Page" id="btnFirstPage" buttonMode="true"
				enabled="false" click="btnFirstClick()">
				<mx:disabledIcon>@Embed(source='images/first-gray.GIF')</mx:disabledIcon>
				<mx:icon>@Embed(source='images/first.GIF')</mx:icon>
			</mx:Button>
			<mx:Button width="22" toolTip="Previous Page" id="btnPreviousPage" buttonMode="true" 
				enabled="false" click="btnPreviousClick()">
				<mx:disabledIcon>@Embed(source='images/previous-gray.GIF')</mx:disabledIcon>
				<mx:icon>@Embed(source='images/previous.GIF')</mx:icon>
			</mx:Button>
			<mx:Button width="22" toolTip="Next Page" id="btnNextPage" buttonMode="true"
				enabled="false" click="btnNextClick()">
				<mx:disabledIcon>@Embed(source='images/next-gray.GIF')</mx:disabledIcon>
				<mx:icon>@Embed(source='images/next.GIF')</mx:icon>
			</mx:Button>
			<mx:Button width="22" toolTip="Last Page" id="btnLastPage" buttonMode="true"
				enabled="false" click="btnLastClick()">
				<mx:disabledIcon>@Embed(source='images/last-gray.GIF')</mx:disabledIcon>
				<mx:icon>@Embed(source='images/last.GIF')</mx:icon>
			</mx:Button>
		<!--
			<mx:TextInput width="40" id="tiCurrentPage" restrict="0123456789"/>
		-->
			<mx:Spacer width="8"/>
		</mx:HBox>
		<mx:ToggleButtonBar buttonWidth="22" toggleOnClick="false" id="tbbFitMode" horizontalGap="1" itemClick="btnFitClick()">
			<mx:Array>
				<mx:Object toolTip="Actual Page Size" buttonMode="true" enabled="false">
					<mx:icon>@Embed(source='images/actualsize.GIF')</mx:icon>
				</mx:Object>
				<mx:Object toolTip="Fit Page" buttonMode="true" enabled="false">
					<mx:icon>@Embed(source='images/fitpage.GIF')</mx:icon>
				</mx:Object>
				<mx:Object toolTip="Fit Width" buttonMode="true" enabled="false">
					<mx:icon>@Embed(source='images/fitwidth.GIF')</mx:icon>
				</mx:Object>
			</mx:Array>
		</mx:ToggleButtonBar>
		<mx:HBox horizontalGap="1">
			<mx:Button width="22" toolTip="Zoom In" id="btnZoomIn" buttonMode="true"
				enabled="true" click="btnZoomInClick()">
				<mx:disabledIcon>@Embed(source='images/zoomin-gray.GIF')</mx:disabledIcon>
				<mx:icon>@Embed(source='images/zoomin.GIF')</mx:icon>
			</mx:Button>
			<mx:Button width="22" toolTip="Zoom Out" id="btnZoomOut" buttonMode="true"
				enabled="true" click="btnZoomOutClick()">
				<mx:disabledIcon>@Embed(source='images/zoomout-gray.GIF')</mx:disabledIcon>
				<mx:icon>@Embed(source='images/zoomout.GIF')</mx:icon>
			</mx:Button>
			<!--
			<mx:ComboBox width="100" toolTip="Zoom Ratio" id="cbZoomRatio" rowCount="20" buttonMode="true"
				selectedIndex="2" enabled="false" editable="true" restrict="0123456789">
				<mx:Array>
					<mx:String>50%</mx:String>
					<mx:String>75%</mx:String>
					<mx:String>100%</mx:String>
					<mx:String>125%</mx:String>
					<mx:String>150%</mx:String>
					<mx:String>175%</mx:String>
					<mx:String>200%</mx:String>
					<mx:String>250%</mx:String>
					<mx:String>400%</mx:String>
					<mx:String>800%</mx:String>
				</mx:Array>
			</mx:ComboBox>
			-->
		</mx:HBox>
		<mx:Spacer width="100%"/>
	</mx:ControlBar>

	<mx:HRule width="100%" strokeWidth="1" strokeColor="#000000"/>

	<mx:Canvas width="100%" height="100%">
		<mx:VBox paddingLeft="20" paddingBottom="20" paddingRight="20" paddingTop="20" id="mainBox" horizontalScrollPolicy="auto" verticalScrollPolicy="auto" height="100%" width="100%" verticalAlign="middle" horizontalAlign="center">
			<mx:VBox backgroundColor="#FFFFFF" borderColor="#000000" id="pageBox" borderStyle="solid" horizontalScrollPolicy="off" verticalScrollPolicy="off">
			</mx:VBox>
		</mx:VBox>
	</mx:Canvas>
	
	<mx:Script>
		<![CDATA[
			import mx.skins.halo.ApplicationBackground;
			import net.sf.jasperreports.flex.xml.PageFactory;
			import net.sf.jasperreports.flex.draw.FrameDrawer;
			import mx.collections.IList;
			import net.sf.jasperreports.flex.view.PageCanvas;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.events.ItemClickEvent;
			import mx.printing.FlexPrintJobScaleType;
			import mx.printing.FlexPrintJob;
			import mx.core.Application;
			import mx.containers.ViewStack;
			import mx.managers.PopUpManager;
			import flash.net.URLLoader;
			import flash.net.URLRequest;
			import flash.events.*;
			
			private static const FIT_NONE:int = -1;
			private static const FIT_ACTUAL_PAGE_SIZE:int = 0;
			private static const FIT_PAGE:int = 1;
			private static const FIT_WIDTH:int = 2;

			private var jrpxmlUrl:String;
			private var urlLoader:URLLoader;
			private var xml:XML;
			private var pageIndex:int = 0;
			private var _pageWidth:int;
			private var _pageHeight:int;
			private var pageCount:int;

			private var zoomRatio:Number = 1;
			private var fitMode:int = FIT_ACTUAL_PAGE_SIZE;

			
			public function set url(url:String):void 
			{
				jrpxmlUrl = url;

				loadPage();
			}

			private function init():void 
			{
				pageBox.visible = false;
				
				//loadPage();
			}

			private function loadPage():void 
			{
				urlLoader = new URLLoader();
				urlLoader.addEventListener(Event.COMPLETE, completeHandler);
				urlLoader.addEventListener(Event.OPEN, openHandler);
				urlLoader.addEventListener(ProgressEvent.PROGRESS, progressHandler);
				urlLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
				urlLoader.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
				urlLoader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);

				//sreiner urlLoader.load(new URLRequest(jrpxmlUrl + "&page=" + pageIndex));
				urlLoader.load(new URLRequest(jrpxmlUrl));
			}

			private function completeHandler(event:Event):void 
			{
				xml = XML(urlLoader.data);
				
				_pageWidth = int(xml.@pageWidth);
				_pageHeight = int(xml.@pageHeight);
				
				pageCount = 0;
				var props:XMLList = xml.property;
				for each (var prop:XML in props)
				{
					if (prop.@name == "net.sf.jasperreports.export.xml.page.count")
					{
						pageCount = int(prop.@value);
					}
				}
				
				refreshPage();
			}

			private function openHandler(event:Event):void
			{
				pageBox.visible = false;
				trace("openHandler: " + event);
			}
			
			private function progressHandler(event:ProgressEvent):void
			{
				pageBox.visible = false;
				trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
			}

			private function securityErrorHandler(event:SecurityErrorEvent):void
			{
				pageBox.visible = false;
				trace("securityErrorHandler: " + event);
			}
			
			private function httpStatusHandler(event:HTTPStatusEvent):void
			{
				pageBox.visible = false;
				trace("httpStatusHandler: " + event);
			}
			
			private function ioErrorHandler(event:IOErrorEvent):void
			{
				pageBox.visible = false;
				trace("ioErrorHandler: " + event);
			}

			private function refreshPage():void 
			{
				if (pageBox)
				{
					switch (fitMode)
					{
						case FIT_ACTUAL_PAGE_SIZE:
							zoomRatio = 1;
							break;
						case FIT_PAGE:
							zoomRatio = (height - toolbar.height - mainBox.getStyle("paddingTop") - mainBox.getStyle("paddingBottom")) / _pageHeight;
							break;
						case FIT_WIDTH:
							zoomRatio = (width - mainBox.getStyle("paddingLeft") - mainBox.getStyle("paddingRight")) / _pageWidth;
							break;
					}
	
					pageBox.width = zoomRatio * _pageWidth;
					pageBox.height = zoomRatio * _pageHeight;
					
					if (pageCount > 0)
					{
						var pageCanvas:PageCanvas = new PageCanvas(xml, pageIndex);
						pageCanvas.scaleX = zoomRatio;
						pageCanvas.scaleY = zoomRatio;
	
						pageBox.visible = false;
						pageBox.removeAllChildren();
						pageBox.addChild(pageCanvas);
						pageBox.visible = true;
					}
					
					btnFirstPage.enabled = (pageIndex > 0);
					btnPreviousPage.enabled = (pageIndex > 0);
					btnNextPage.enabled = (pageIndex < pageCount - 1);
					btnLastPage.enabled = (pageIndex < pageCount - 1);
					
					btnZoomIn.enabled = (zoomRatio <= 8);
					btnZoomOut.enabled = (zoomRatio >= 0.25);
				}
			}

			private function btnFirstClick():void 
			{
				pageIndex = 0;
				//loadPage();
				refreshPage();
			}

			private function btnPreviousClick():void 
			{
				pageIndex--;
				//loadPage();
				refreshPage();
			}

			private function btnNextClick():void 
			{
				pageIndex++;
				//loadPage();
				refreshPage();
			}

			private function btnLastClick():void 
			{
				pageIndex = pageCount - 1;
				//loadPage();
				refreshPage();
			}

			private function btnFitClick():void 
			{
				fitMode = tbbFitMode.selectedIndex;
				refreshPage();
			}

			private function btnZoomInClick():void 
			{
				fitMode = FIT_NONE;
				tbbFitMode.selectedIndex = fitMode;
				zoomRatio = zoomRatio * 2;
				refreshPage();
			}

			private function btnZoomOutClick():void 
			{
				fitMode = FIT_NONE;
				tbbFitMode.selectedIndex = fitMode;
				zoomRatio = zoomRatio / 2;
				refreshPage();
			}
		]]>
	</mx:Script>
	
</mx:VBox>
